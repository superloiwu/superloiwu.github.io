---
layout: post
title:  "iOS开发进阶"
date:   2016-4-30 9:00:00 +0800
published:  false
categories: my projects
---

但行好事，不忘初心

---

## **开发工具**

### 依赖管理

* CocoaPods 
[CocoaPods 使用手册](http://www.cnblogs.com/ouyangfang/p/4173544.html)
* Carthage
[Carthage 使用心得](http://www.jianshu.com/p/bf263c596538)

### 网络封包分析

* Charles
[Charles 官方website](http://www.charlesproxy.com)
[Charles 使用教程](http://blog.csdn.net/jiangwei0910410003/article/details/41620363)

### 界面调试

* Reveal
[Reveal 官方website](http://revealapp.com)
* PonyDebugger
[PonyDebugger Github](https://github.com/square/PonyDebugger)

### 移动统计

* Flurry
[Flurry 官方website](http://www.flurry.com)

### Crash Log 记录

* Crashlytics
[Crashlytics 官方website](https://try.crashlytics.com)

### App Store 统计

* App Annie
[App Annie 官方website](https://www.appannie.com)

### Xcode 插件

* 插件管理
[Xcode插件管理工具Alcatraz](http://www.jianshu.com/p/7a2484123bf6)
* VVDocumenter
[VVDocumenter Github](https://github.com/onevcat/VVDocumenter-Xcode)
* appledoc
[appledoc Github](https://github.com/tomaz/appledoc)


## **开发实践**

### 内存管理

Key Concepts：
引用计数、Automatic Reference Counting、-fno-objc-arc、"谁申请谁释放"、reference cycles、weak reference、Instruments、memory leaks、Manual Reference Counting、Deprecad、Core Foundation、__bridge、__bridge_retained、__bridge_transfer

Key Topics：
1. 引用计数及其设计、使用原理
2. 向已经释放的对象发送消息带来的风险
3. 循环引用问题及其检测与解决
4. Core Foundation对象的内存管理

### GCD Grand Central Dispatch


## **底层原理**
